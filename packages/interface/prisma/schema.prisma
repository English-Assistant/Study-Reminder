// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Prisma 客户端生成器配置
generator client {
  provider = "prisma-client-js"
}

// 数据源配置
datasource db {
  provider = "postgresql" // 指定数据库类型为 PostgreSQL
  url      = env("DATABASE_URL") // 从环境变量 DATABASE_URL 读取数据库连接字符串
}

//
// ====== 枚举定义区域 ======
//

/// 复习时间间隔（用于构建遗忘曲线）
enum IntervalUnit {
  MINUTE // 分钟
  HOUR // 小时
  DAY // 天
}

/// 循环模式：只提醒一次或循环提醒
enum ReviewMode {
  ONCE // 一次性复习
  RECURRING // 循环复习
}

//
// ====== 模型定义区域 ======
//

/// 用户表：记录账号信息
model User {
  id           String        @id @default(cuid()) // 用户ID
  username     String        @unique // 用户名调整为唯一
  password     String // 加密后的密码
  email        String        @unique // 邮箱，唯一且必填
  settings     Setting? // 一对一设置记录
  reviewRules  ReviewRule[] // 用户的复习规则
  courses      Course[] // 用户的课程
  studyRecords StudyRecord[] // 用户的打卡记录
  createdAt    DateTime      @default(now()) // 注册时间
  updatedAt    DateTime      @updatedAt // 最后更新时间
  studyTimeWindows StudyTimeWindow[] // 用户的学习时间段
}

/// 设置表：用户通知偏好
model Setting {
  id                 String  @id @default(cuid()) // 设置ID
  userId             String  @unique // 用户ID
  globalNotification Boolean @default(true) // 是否开启全局通知
  emailNotification  Boolean @default(true) // 是否开启邮箱通知
  inAppNotification  Boolean @default(true) // 是否开启站内通知
  user               User    @relation(fields: [userId], references: [id])
}

/// 学习时间段表
model StudyTimeWindow {
  id        String @id @default(cuid())
  userId    String
  startTime String // "HH:mm" 格式的开始时间
  endTime   String // "HH:mm" 格式的结束时间
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

/// 复习规则表：用于计算复习提醒时间
model ReviewRule {
  id     String       @id @default(cuid()) // 主键
  userId String
  value  Int // 时间数值
  unit   IntervalUnit // 时间单位：分钟/小时/天
  mode   ReviewMode   @default(ONCE) // 循环 or 一次
  note   String? // 备注
  user   User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// 课程表：每个用户可以定义多个课程
model Course {
  id           String        @id @default(cuid()) // 课程ID
  userId       String // 所属用户
  name         String // 课程名称
  color        String // UI颜色
  note         String? // 可选备注
  user         User          @relation(fields: [userId], references: [id])
  studyRecords StudyRecord[] // 对应打卡记录
  createdAt    DateTime      @default(now()) // 创建时间

  @@unique([userId, name]) // 确保同一用户下课程名称唯一
}

/// 打卡记录表：记录用户每次打卡的信息
model StudyRecord {
  id        String   @id @default(cuid()) // 记录ID
  userId    String // 所属用户
  courseId  String // 所属课程
  studiedAt DateTime // 打卡完成的确切时间
  textTitle String // 打卡的课文标题
  note      String? // 可选备注
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) // 创建时间

  @@index([userId, studiedAt]) // 用于快速查询某用户在某个时间点之后的打卡记录
}

/// 验证码表：用于邮箱验证和密码重置
model VerificationCode {
  id        String   @id @default(cuid()) // 验证码ID
  email     String // 邮箱地址
  code      String // 验证码
  type      String // 验证码类型：register, login, reset_password
  expiresAt DateTime // 过期时间
  used      Boolean  @default(false) // 是否已使用
  createdAt DateTime @default(now()) // 创建时间

  @@index([email, type]) // 用于快速查询某邮箱的验证码
}
